plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'fr.alexpado.bots'
version = '3.0.0-SNAPSHOT'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }

    maven {
        name = "GitHubPackages"
        url = uri('https://maven.pkg.github.com/anisekai-project/simple-http-client')

        credentials {
            username = project.findProperty('gpr.user') ?: System.getenv('username')
            password = project.findProperty('gpr.key') ?: System.getenv('token')
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compile group: 'org.json', name: 'json', version: '20200518'
    compile 'net.dv8tion:JDA:4.2.0_204'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.2'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
    compile group: 'net.htmlparser.jericho', name: 'jericho-html', version: '3.4'
    implementation 'com.github.alexpado:DiscordBot:1.0'
    implementation group: 'me.anisekai', name: 'simple-http-client', version: '1.0.0'
}

task copyConfigurationMetadata(type: Copy) {
    from(compileJava) {
        include 'META-INF/spring-configuration-metadata.json'
    }
    into "out/production/classes"
}
compileJava {
    dependsOn processResources
    finalizedBy copyConfigurationMetadata
}

test {
    useJUnitPlatform()
}

tasks.withType(org.gradle.jvm.tasks.Jar) {

    if (project.hasProperty('destinationPath')) {
        destinationDirectory = file(project.property('destinationPath'))
    }

    if (project.hasProperty('destinationName')) {
        archiveFileName = project.property('destinationName') + '.jar'
    }

}
